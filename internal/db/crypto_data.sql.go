// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: crypto_data.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBNBCryptoData = `-- name: CreateBNBCryptoData :one
INSERT INTO bnb_crypto_data(master_pub_key) VALUES ($1)
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

// BNB
func (q *Queries) CreateBNBCryptoData(ctx context.Context, masterPubKey string) (BnbCryptoDatum, error) {
	row := q.db.QueryRow(ctx, createBNBCryptoData, masterPubKey)
	var i BnbCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const createBTCCryptoData = `-- name: CreateBTCCryptoData :one
INSERT INTO btc_crypto_data(master_pub_key) VALUES ($1)
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

// BTC
func (q *Queries) CreateBTCCryptoData(ctx context.Context, masterPubKey string) (BtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, createBTCCryptoData, masterPubKey)
	var i BtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const createCryptoData = `-- name: CreateCryptoData :one
INSERT INTO crypto_data(xmr_id, btc_id, ltc_id, eth_id, bnb_id, user_id) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type CreateCryptoDataParams struct {
	XmrID  pgtype.UUID
	BtcID  pgtype.UUID
	LtcID  pgtype.UUID
	EthID  pgtype.UUID
	BnbID  pgtype.UUID
	UserID pgtype.UUID
}

func (q *Queries) CreateCryptoData(ctx context.Context, arg CreateCryptoDataParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, createCryptoData,
		arg.XmrID,
		arg.BtcID,
		arg.LtcID,
		arg.EthID,
		arg.BnbID,
		arg.UserID,
	)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const createETHCryptoData = `-- name: CreateETHCryptoData :one
INSERT INTO eth_crypto_data(master_pub_key) VALUES ($1)
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

// ETH
func (q *Queries) CreateETHCryptoData(ctx context.Context, masterPubKey string) (EthCryptoDatum, error) {
	row := q.db.QueryRow(ctx, createETHCryptoData, masterPubKey)
	var i EthCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const createLTCCryptoData = `-- name: CreateLTCCryptoData :one
INSERT INTO ltc_crypto_data(master_pub_key) VALUES ($1)
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

// LTC
func (q *Queries) CreateLTCCryptoData(ctx context.Context, masterPubKey string) (LtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, createLTCCryptoData, masterPubKey)
	var i LtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const createXMRCryptoData = `-- name: CreateXMRCryptoData :one
INSERT INTO xmr_crypto_data(priv_view_key, pub_spend_key) VALUES ($1, $2)
RETURNING id, priv_view_key, pub_spend_key, last_major_index, last_minor_index
`

type CreateXMRCryptoDataParams struct {
	PrivViewKey string
	PubSpendKey string
}

// XMR
func (q *Queries) CreateXMRCryptoData(ctx context.Context, arg CreateXMRCryptoDataParams) (XmrCryptoDatum, error) {
	row := q.db.QueryRow(ctx, createXMRCryptoData, arg.PrivViewKey, arg.PubSpendKey)
	var i XmrCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.PrivViewKey,
		&i.PubSpendKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const findCryptoDataByUserId = `-- name: FindCryptoDataByUserId :one
SELECT user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id FROM crypto_data 
WHERE user_id = $1
`

func (q *Queries) FindCryptoDataByUserId(ctx context.Context, userID pgtype.UUID) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, findCryptoDataByUserId, userID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const findKeysAndIncrementedIndicesBNBCryptoDataById = `-- name: FindKeysAndIncrementedIndicesBNBCryptoDataById :one
UPDATE bnb_crypto_data
SET last_minor_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN 0
        ELSE last_minor_index + 1
    END,
    last_major_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN last_major_index + 1
        ELSE last_major_index
    END
WHERE id = $1
RETURNING master_pub_key, last_major_index, last_minor_index
`

type FindKeysAndIncrementedIndicesBNBCryptoDataByIdRow struct {
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindKeysAndIncrementedIndicesBNBCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysAndIncrementedIndicesBNBCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysAndIncrementedIndicesBNBCryptoDataById, id)
	var i FindKeysAndIncrementedIndicesBNBCryptoDataByIdRow
	err := row.Scan(&i.MasterPubKey, &i.LastMajorIndex, &i.LastMinorIndex)
	return i, err
}

const findKeysAndIncrementedIndicesBTCCryptoDataById = `-- name: FindKeysAndIncrementedIndicesBTCCryptoDataById :one
UPDATE btc_crypto_data
SET last_minor_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN 0
        ELSE last_minor_index + 1
    END,
    last_major_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN last_major_index + 1
        ELSE last_major_index
    END
WHERE id = $1
RETURNING master_pub_key, last_major_index, last_minor_index
`

type FindKeysAndIncrementedIndicesBTCCryptoDataByIdRow struct {
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindKeysAndIncrementedIndicesBTCCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysAndIncrementedIndicesBTCCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysAndIncrementedIndicesBTCCryptoDataById, id)
	var i FindKeysAndIncrementedIndicesBTCCryptoDataByIdRow
	err := row.Scan(&i.MasterPubKey, &i.LastMajorIndex, &i.LastMinorIndex)
	return i, err
}

const findKeysAndIncrementedIndicesETHCryptoDataById = `-- name: FindKeysAndIncrementedIndicesETHCryptoDataById :one
UPDATE eth_crypto_data
SET last_minor_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN 0
        ELSE last_minor_index + 1
    END,
    last_major_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN last_major_index + 1
        ELSE last_major_index
    END
WHERE id = $1
RETURNING master_pub_key, last_major_index, last_minor_index
`

type FindKeysAndIncrementedIndicesETHCryptoDataByIdRow struct {
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindKeysAndIncrementedIndicesETHCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysAndIncrementedIndicesETHCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysAndIncrementedIndicesETHCryptoDataById, id)
	var i FindKeysAndIncrementedIndicesETHCryptoDataByIdRow
	err := row.Scan(&i.MasterPubKey, &i.LastMajorIndex, &i.LastMinorIndex)
	return i, err
}

const findKeysAndIncrementedIndicesLTCCryptoDataById = `-- name: FindKeysAndIncrementedIndicesLTCCryptoDataById :one
UPDATE ltc_crypto_data
SET last_minor_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN 0
        ELSE last_minor_index + 1
    END,
    last_major_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN last_major_index + 1
        ELSE last_major_index
    END
WHERE id = $1
RETURNING master_pub_key, last_major_index, last_minor_index
`

type FindKeysAndIncrementedIndicesLTCCryptoDataByIdRow struct {
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindKeysAndIncrementedIndicesLTCCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysAndIncrementedIndicesLTCCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysAndIncrementedIndicesLTCCryptoDataById, id)
	var i FindKeysAndIncrementedIndicesLTCCryptoDataByIdRow
	err := row.Scan(&i.MasterPubKey, &i.LastMajorIndex, &i.LastMinorIndex)
	return i, err
}

const findKeysAndIncrementedIndicesXMRCryptoDataById = `-- name: FindKeysAndIncrementedIndicesXMRCryptoDataById :one
UPDATE xmr_crypto_data
SET last_minor_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN 0
        ELSE last_minor_index + 1
    END,
    last_major_index = CASE 
        WHEN last_minor_index >= 2147483647 THEN last_major_index + 1
        ELSE last_major_index
    END
WHERE id = $1
RETURNING priv_view_key, pub_spend_key, last_major_index, last_minor_index
`

type FindKeysAndIncrementedIndicesXMRCryptoDataByIdRow struct {
	PrivViewKey    string
	PubSpendKey    string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindKeysAndIncrementedIndicesXMRCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysAndIncrementedIndicesXMRCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysAndIncrementedIndicesXMRCryptoDataById, id)
	var i FindKeysAndIncrementedIndicesXMRCryptoDataByIdRow
	err := row.Scan(
		&i.PrivViewKey,
		&i.PubSpendKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const findKeysXMRCryptoDataById = `-- name: FindKeysXMRCryptoDataById :one
SELECT priv_view_key, pub_spend_key
FROM xmr_crypto_data
WHERE id = $1
`

type FindKeysXMRCryptoDataByIdRow struct {
	PrivViewKey string
	PubSpendKey string
}

func (q *Queries) FindKeysXMRCryptoDataById(ctx context.Context, id pgtype.UUID) (FindKeysXMRCryptoDataByIdRow, error) {
	row := q.db.QueryRow(ctx, findKeysXMRCryptoDataById, id)
	var i FindKeysXMRCryptoDataByIdRow
	err := row.Scan(&i.PrivViewKey, &i.PubSpendKey)
	return i, err
}

const setBNBCryptoDataByUserId = `-- name: SetBNBCryptoDataByUserId :one
UPDATE crypto_data
SET bnb_id = $2
WHERE user_id = $1
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type SetBNBCryptoDataByUserIdParams struct {
	UserID pgtype.UUID
	BnbID  pgtype.UUID
}

func (q *Queries) SetBNBCryptoDataByUserId(ctx context.Context, arg SetBNBCryptoDataByUserIdParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, setBNBCryptoDataByUserId, arg.UserID, arg.BnbID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const setBTCCryptoDataByUserId = `-- name: SetBTCCryptoDataByUserId :one
UPDATE crypto_data
SET btc_id = $2
WHERE user_id = $1
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type SetBTCCryptoDataByUserIdParams struct {
	UserID pgtype.UUID
	BtcID  pgtype.UUID
}

func (q *Queries) SetBTCCryptoDataByUserId(ctx context.Context, arg SetBTCCryptoDataByUserIdParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, setBTCCryptoDataByUserId, arg.UserID, arg.BtcID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const setETHCryptoDataByUserId = `-- name: SetETHCryptoDataByUserId :one
UPDATE crypto_data
SET eth_id = $2
WHERE user_id = $1
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type SetETHCryptoDataByUserIdParams struct {
	UserID pgtype.UUID
	EthID  pgtype.UUID
}

func (q *Queries) SetETHCryptoDataByUserId(ctx context.Context, arg SetETHCryptoDataByUserIdParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, setETHCryptoDataByUserId, arg.UserID, arg.EthID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const setLTCCryptoDataByUserId = `-- name: SetLTCCryptoDataByUserId :one
UPDATE crypto_data
SET ltc_id = $2
WHERE user_id = $1
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type SetLTCCryptoDataByUserIdParams struct {
	UserID pgtype.UUID
	LtcID  pgtype.UUID
}

func (q *Queries) SetLTCCryptoDataByUserId(ctx context.Context, arg SetLTCCryptoDataByUserIdParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, setLTCCryptoDataByUserId, arg.UserID, arg.LtcID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const setXMRCryptoDataByUserId = `-- name: SetXMRCryptoDataByUserId :one
UPDATE crypto_data
SET xmr_id = $2 
WHERE user_id = $1
RETURNING user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id
`

type SetXMRCryptoDataByUserIdParams struct {
	UserID pgtype.UUID
	XmrID  pgtype.UUID
}

func (q *Queries) SetXMRCryptoDataByUserId(ctx context.Context, arg SetXMRCryptoDataByUserIdParams) (CryptoDatum, error) {
	row := q.db.QueryRow(ctx, setXMRCryptoDataByUserId, arg.UserID, arg.XmrID)
	var i CryptoDatum
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
	)
	return i, err
}

const updateKeysBNBCryptoDataById = `-- name: UpdateKeysBNBCryptoDataById :one
UPDATE bnb_crypto_data
SET master_pub_key = $2,
    last_major_index = 0,
    last_minor_index = 0
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateKeysBNBCryptoDataByIdParams struct {
	ID           pgtype.UUID
	MasterPubKey string
}

func (q *Queries) UpdateKeysBNBCryptoDataById(ctx context.Context, arg UpdateKeysBNBCryptoDataByIdParams) (BnbCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateKeysBNBCryptoDataById, arg.ID, arg.MasterPubKey)
	var i BnbCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateKeysBTCCryptoDataById = `-- name: UpdateKeysBTCCryptoDataById :one
UPDATE btc_crypto_data
SET master_pub_key = $2,
    last_major_index = 0,
    last_minor_index = 0
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateKeysBTCCryptoDataByIdParams struct {
	ID           pgtype.UUID
	MasterPubKey string
}

func (q *Queries) UpdateKeysBTCCryptoDataById(ctx context.Context, arg UpdateKeysBTCCryptoDataByIdParams) (BtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateKeysBTCCryptoDataById, arg.ID, arg.MasterPubKey)
	var i BtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateKeysETHCryptoDataById = `-- name: UpdateKeysETHCryptoDataById :one
UPDATE eth_crypto_data
SET master_pub_key = $2,
    last_major_index = 0,
    last_minor_index = 0
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateKeysETHCryptoDataByIdParams struct {
	ID           pgtype.UUID
	MasterPubKey string
}

func (q *Queries) UpdateKeysETHCryptoDataById(ctx context.Context, arg UpdateKeysETHCryptoDataByIdParams) (EthCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateKeysETHCryptoDataById, arg.ID, arg.MasterPubKey)
	var i EthCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateKeysLTCCryptoDataById = `-- name: UpdateKeysLTCCryptoDataById :one
UPDATE ltc_crypto_data
SET master_pub_key = $2,
    last_major_index = 0,
    last_minor_index = 0
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateKeysLTCCryptoDataByIdParams struct {
	ID           pgtype.UUID
	MasterPubKey string
}

func (q *Queries) UpdateKeysLTCCryptoDataById(ctx context.Context, arg UpdateKeysLTCCryptoDataByIdParams) (LtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateKeysLTCCryptoDataById, arg.ID, arg.MasterPubKey)
	var i LtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateKeysXMRCryptoDataById = `-- name: UpdateKeysXMRCryptoDataById :one
UPDATE xmr_crypto_data
SET priv_view_key = $2,
    pub_spend_key = $3,
    last_major_index = 0,
    last_minor_index = 0
WHERE id = $1
RETURNING id, priv_view_key, pub_spend_key, last_major_index, last_minor_index
`

type UpdateKeysXMRCryptoDataByIdParams struct {
	ID          pgtype.UUID
	PrivViewKey string
	PubSpendKey string
}

func (q *Queries) UpdateKeysXMRCryptoDataById(ctx context.Context, arg UpdateKeysXMRCryptoDataByIdParams) (XmrCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateKeysXMRCryptoDataById, arg.ID, arg.PrivViewKey, arg.PubSpendKey)
	var i XmrCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.PrivViewKey,
		&i.PubSpendKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}
