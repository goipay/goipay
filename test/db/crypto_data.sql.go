// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: crypto_data.sql

package db_test

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findJoinedCryptoDataByUserId = `-- name: FindJoinedCryptoDataByUserId :one
SELECT user_id, xmr_id, btc_id, ltc_id, eth_id, bnb_id, id, priv_view_key, pub_spend_key, last_major_index, last_minor_index FROM crypto_data as cd
JOIN xmr_crypto_data as xcd ON cd.xmr_id = xcd.id
WHERE user_id = $1
`

type FindJoinedCryptoDataByUserIdRow struct {
	UserID         pgtype.UUID
	XmrID          pgtype.UUID
	BtcID          pgtype.UUID
	LtcID          pgtype.UUID
	EthID          pgtype.UUID
	BnbID          pgtype.UUID
	ID             pgtype.UUID
	PrivViewKey    string
	PubSpendKey    string
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) FindJoinedCryptoDataByUserId(ctx context.Context, userID pgtype.UUID) (FindJoinedCryptoDataByUserIdRow, error) {
	row := q.db.QueryRow(ctx, findJoinedCryptoDataByUserId, userID)
	var i FindJoinedCryptoDataByUserIdRow
	err := row.Scan(
		&i.UserID,
		&i.XmrID,
		&i.BtcID,
		&i.LtcID,
		&i.EthID,
		&i.BnbID,
		&i.ID,
		&i.PrivViewKey,
		&i.PubSpendKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateIndicesBNBCryptoDataById = `-- name: UpdateIndicesBNBCryptoDataById :one
UPDATE bnb_crypto_data
SET last_major_index = $2,
    last_minor_index = $3
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateIndicesBNBCryptoDataByIdParams struct {
	ID             pgtype.UUID
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) UpdateIndicesBNBCryptoDataById(ctx context.Context, arg UpdateIndicesBNBCryptoDataByIdParams) (BnbCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateIndicesBNBCryptoDataById, arg.ID, arg.LastMajorIndex, arg.LastMinorIndex)
	var i BnbCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateIndicesBTCCryptoDataById = `-- name: UpdateIndicesBTCCryptoDataById :one
UPDATE btc_crypto_data
SET last_major_index = $2,
    last_minor_index = $3
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateIndicesBTCCryptoDataByIdParams struct {
	ID             pgtype.UUID
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) UpdateIndicesBTCCryptoDataById(ctx context.Context, arg UpdateIndicesBTCCryptoDataByIdParams) (BtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateIndicesBTCCryptoDataById, arg.ID, arg.LastMajorIndex, arg.LastMinorIndex)
	var i BtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateIndicesETHCryptoDataById = `-- name: UpdateIndicesETHCryptoDataById :one
UPDATE eth_crypto_data
SET last_major_index = $2,
    last_minor_index = $3
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateIndicesETHCryptoDataByIdParams struct {
	ID             pgtype.UUID
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) UpdateIndicesETHCryptoDataById(ctx context.Context, arg UpdateIndicesETHCryptoDataByIdParams) (EthCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateIndicesETHCryptoDataById, arg.ID, arg.LastMajorIndex, arg.LastMinorIndex)
	var i EthCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateIndicesLTCCryptoDataById = `-- name: UpdateIndicesLTCCryptoDataById :one
UPDATE ltc_crypto_data
SET last_major_index = $2,
    last_minor_index = $3
WHERE id = $1
RETURNING id, master_pub_key, last_major_index, last_minor_index
`

type UpdateIndicesLTCCryptoDataByIdParams struct {
	ID             pgtype.UUID
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) UpdateIndicesLTCCryptoDataById(ctx context.Context, arg UpdateIndicesLTCCryptoDataByIdParams) (LtcCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateIndicesLTCCryptoDataById, arg.ID, arg.LastMajorIndex, arg.LastMinorIndex)
	var i LtcCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.MasterPubKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}

const updateIndicesXMRCryptoDataById = `-- name: UpdateIndicesXMRCryptoDataById :one
UPDATE xmr_crypto_data
SET last_major_index = $2,
    last_minor_index = $3
WHERE id = $1
RETURNING id, priv_view_key, pub_spend_key, last_major_index, last_minor_index
`

type UpdateIndicesXMRCryptoDataByIdParams struct {
	ID             pgtype.UUID
	LastMajorIndex int32
	LastMinorIndex int32
}

func (q *Queries) UpdateIndicesXMRCryptoDataById(ctx context.Context, arg UpdateIndicesXMRCryptoDataByIdParams) (XmrCryptoDatum, error) {
	row := q.db.QueryRow(ctx, updateIndicesXMRCryptoDataById, arg.ID, arg.LastMajorIndex, arg.LastMinorIndex)
	var i XmrCryptoDatum
	err := row.Scan(
		&i.ID,
		&i.PrivViewKey,
		&i.PubSpendKey,
		&i.LastMajorIndex,
		&i.LastMinorIndex,
	)
	return i, err
}
