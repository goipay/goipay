// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invoice.sql

package db_test

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAllInvoices = `-- name: FindAllInvoices :many
SELECT id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id FROM invoices
`

func (q *Queries) FindAllInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, findAllInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CryptoAddress,
			&i.Coin,
			&i.RequiredAmount,
			&i.ActualAmount,
			&i.ConfirmationsRequired,
			&i.CreatedAt,
			&i.ConfirmedAt,
			&i.Status,
			&i.ExpiresAt,
			&i.TxID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllInvoicesByIds = `-- name: FindAllInvoicesByIds :many
SELECT id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id FROM invoices
WHERE id = ANY($1::uuid[])
`

func (q *Queries) FindAllInvoicesByIds(ctx context.Context, dollar_1 []pgtype.UUID) ([]Invoice, error) {
	rows, err := q.db.Query(ctx, findAllInvoicesByIds, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.CryptoAddress,
			&i.Coin,
			&i.RequiredAmount,
			&i.ActualAmount,
			&i.ConfirmationsRequired,
			&i.CreatedAt,
			&i.ConfirmedAt,
			&i.Status,
			&i.ExpiresAt,
			&i.TxID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findInvoiceById = `-- name: FindInvoiceById :one
SELECT id, crypto_address, coin, required_amount, actual_amount, confirmations_required, created_at, confirmed_at, status, expires_at, tx_id, user_id FROM invoices
WHERE id = $1
`

func (q *Queries) FindInvoiceById(ctx context.Context, id pgtype.UUID) (Invoice, error) {
	row := q.db.QueryRow(ctx, findInvoiceById, id)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.CryptoAddress,
		&i.Coin,
		&i.RequiredAmount,
		&i.ActualAmount,
		&i.ConfirmationsRequired,
		&i.CreatedAt,
		&i.ConfirmedAt,
		&i.Status,
		&i.ExpiresAt,
		&i.TxID,
		&i.UserID,
	)
	return i, err
}
