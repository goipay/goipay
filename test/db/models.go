// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db_test

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CoinType string

const (
	CoinTypeXMR         CoinType = "XMR"
	CoinTypeBTC         CoinType = "BTC"
	CoinTypeLTC         CoinType = "LTC"
	CoinTypeETH         CoinType = "ETH"
	CoinTypeTON         CoinType = "TON"
	CoinTypeUSDTERC20   CoinType = "USDT_ERC20"
	CoinTypeUSDCERC20   CoinType = "USDC_ERC20"
	CoinTypeDAIERC20    CoinType = "DAI_ERC20"
	CoinTypeWBTCERC20   CoinType = "WBTC_ERC20"
	CoinTypeUNIERC20    CoinType = "UNI_ERC20"
	CoinTypeLINKERC20   CoinType = "LINK_ERC20"
	CoinTypeAAVEERC20   CoinType = "AAVE_ERC20"
	CoinTypeCRVERC20    CoinType = "CRV_ERC20"
	CoinTypeMATICERC20  CoinType = "MATIC_ERC20"
	CoinTypeSHIBERC20   CoinType = "SHIB_ERC20"
	CoinTypeBNBERC20    CoinType = "BNB_ERC20"
	CoinTypeATOMERC20   CoinType = "ATOM_ERC20"
	CoinTypeARBERC20    CoinType = "ARB_ERC20"
	CoinTypeBNB         CoinType = "BNB"
	CoinTypeBSCUSDBEP20 CoinType = "BSC-USD_BEP20"
	CoinTypeUSDCBEP20   CoinType = "USDC_BEP20"
	CoinTypeDAIBEP20    CoinType = "DAI_BEP20"
	CoinTypeBUSDBEP20   CoinType = "BUSD_BEP20"
	CoinTypeWBTCBEP20   CoinType = "WBTC_BEP20"
	CoinTypeBTCBBEP20   CoinType = "BTCB_BEP20"
	CoinTypeUNIBEP20    CoinType = "UNI_BEP20"
	CoinTypeLINKBEP20   CoinType = "LINK_BEP20"
	CoinTypeAAVEBEP20   CoinType = "AAVE_BEP20"
	CoinTypeMATICBEP20  CoinType = "MATIC_BEP20"
	CoinTypeSHIBBEP20   CoinType = "SHIB_BEP20"
	CoinTypeATOMBEP20   CoinType = "ATOM_BEP20"
	CoinTypeARBBEP20    CoinType = "ARB_BEP20"
	CoinTypeETHBEP20    CoinType = "ETH_BEP20"
	CoinTypeXRPBEP20    CoinType = "XRP_BEP20"
	CoinTypeADABEP20    CoinType = "ADA_BEP20"
	CoinTypeTRXBEP20    CoinType = "TRX_BEP20"
	CoinTypeDOGEBEP20   CoinType = "DOGE_BEP20"
	CoinTypeLTCBEP20    CoinType = "LTC_BEP20"
	CoinTypeBCHBEP20    CoinType = "BCH_BEP20"
	CoinTypeTWTBEP20    CoinType = "TWT_BEP20"
	CoinTypeAVAXBEP20   CoinType = "AVAX_BEP20"
	CoinTypeCAKEBEP20   CoinType = "CAKE_BEP20"
)

func (e *CoinType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CoinType(s)
	case string:
		*e = CoinType(s)
	default:
		return fmt.Errorf("unsupported scan type for CoinType: %T", src)
	}
	return nil
}

type NullCoinType struct {
	CoinType CoinType
	Valid    bool // Valid is true if CoinType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCoinType) Scan(value interface{}) error {
	if value == nil {
		ns.CoinType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CoinType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCoinType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CoinType), nil
}

type InvoiceStatusType string

const (
	InvoiceStatusTypePENDING        InvoiceStatusType = "PENDING"
	InvoiceStatusTypePENDINGMEMPOOL InvoiceStatusType = "PENDING_MEMPOOL"
	InvoiceStatusTypeEXPIRED        InvoiceStatusType = "EXPIRED"
	InvoiceStatusTypeCONFIRMED      InvoiceStatusType = "CONFIRMED"
)

func (e *InvoiceStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvoiceStatusType(s)
	case string:
		*e = InvoiceStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for InvoiceStatusType: %T", src)
	}
	return nil
}

type NullInvoiceStatusType struct {
	InvoiceStatusType InvoiceStatusType
	Valid             bool // Valid is true if InvoiceStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvoiceStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.InvoiceStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvoiceStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvoiceStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvoiceStatusType), nil
}

type BnbCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type BtcCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type CryptoAddress struct {
	ID         pgtype.UUID
	Address    string
	Coin       CoinType
	IsOccupied bool
	UserID     pgtype.UUID
}

type CryptoCache struct {
	Coin                  CoinType
	LastSyncedBlockHeight pgtype.Int8
	SyncedTimestamp       pgtype.Timestamptz
}

type CryptoDatum struct {
	UserID pgtype.UUID
	XmrID  pgtype.UUID
	BtcID  pgtype.UUID
	LtcID  pgtype.UUID
	EthID  pgtype.UUID
	BnbID  pgtype.UUID
}

type EthCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type Invoice struct {
	ID                    pgtype.UUID
	CryptoAddress         string
	Coin                  CoinType
	RequiredAmount        float64
	ActualAmount          pgtype.Float8
	ConfirmationsRequired int16
	CreatedAt             pgtype.Timestamptz
	ConfirmedAt           pgtype.Timestamptz
	Status                InvoiceStatusType
	ExpiresAt             pgtype.Timestamptz
	TxID                  pgtype.Text
	UserID                pgtype.UUID
}

type LtcCryptoDatum struct {
	ID             pgtype.UUID
	MasterPubKey   string
	LastMajorIndex int32
	LastMinorIndex int32
}

type User struct {
	ID pgtype.UUID
}

type XmrCryptoDatum struct {
	ID             pgtype.UUID
	PrivViewKey    string
	PubSpendKey    string
	LastMajorIndex int32
	LastMinorIndex int32
}
